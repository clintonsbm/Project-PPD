//
//  ChatViewController.swift
//  SocketIOPPDProject
//
//  Created by Clinton de Sá Barreto Maciel on 11/02/19.
//  Copyright (c) 2019 Clinton de Sá. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftGRPC

protocol ChatDisplayLogic: class {
    func displaySendMessage(viewModel: Chat.SendMessage.ViewModel)
    func displayRefreshMessages(viewModel: Chat.RefreshMessages.ViewModel)
}

class ChatViewController: UIViewController {
    var interactor: ChatBusinessLogic?
    var router: (NSObjectProtocol & ChatRoutingLogic & ChatDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = ChatInteractor()
        let presenter = ChatPresenter()
        let router = ChatRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        
        // Intantiave chat view to show messages
        DispatchQueue.main.async {
            self.view = ChatView(delegate: self)
        }
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
}

extension ChatViewController: ChatViewDelegate {
    func send(message: String) {
        let request = Chat.SendMessage.Request(message: message)
        interactor?.sendMessage(request: request)
    }
    
    func refresh() {
        let request = Chat.RefreshMessages.Request()
        interactor?.refreshMessages(reques: request)
    }
}

extension ChatViewController: ChatDisplayLogic {
    
    // MARK: Send message
    
    func displaySendMessage(viewModel: Chat.SendMessage.ViewModel) {
        if !viewModel.success {
//            AlertHelper.show
            print("Error")
        }
    }
    
    // MARK: Refresh messages
    
    func displayRefreshMessages(viewModel: Chat.RefreshMessages.ViewModel) {
        DispatchQueue.main.async {
            (self.view as! ChatView).add(allMessages: viewModel.messages)
        }
    }
}
