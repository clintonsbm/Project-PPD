//
//  GamePresenter.swift
//  SocketIOPPDProject
//
//  Created by Clinton de Sá Barreto Maciel on 20/02/19.
//  Copyright (c) 2019 Clinton de Sá. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol GamePresentationLogic {
    func presentRemoveLetter(response: Game.ReceivedLetterEvent.Response)
    func presentRequestToConfirm(response: Game.ReceivedRequestToConfim.Response)
    func presentSetupForConfirmDeny(response: Game.SetupForConfirmDenyResponse.Response)
    func presentResponseToConfirm(response: Game.ReceivedResponseToConfirm.Response)
    func presentSortLetter(response: Game.SortLetter.Response)
    func presentRestartMatch(response: Game.RestartMatch.Response)
}

class GamePresenter: GamePresentationLogic {
    weak var viewController: GameDisplayLogic?
    
    // MARK: Remove letter
    
    func presentRemoveLetter(response: Game.ReceivedLetterEvent.Response) {
        let viewModel = Game.ReceivedLetterEvent.ViewModel(textToLabel: "Suas letras restantes: \(response.lettersLeft)")
        viewController?.displayRemoveLetter(viewModel: viewModel)
    }
    
    // MARK: Request to confirm
    
    func presentRequestToConfirm(response: Game.ReceivedRequestToConfim.Response) {
        if response.lettersToRemove.isEmpty {
            let response = Game.ReceivedRequestToConfim.ViewModel(shouldBypassConfirmation: true, lettersToRemove: [], textToLabel: "")
            viewController?.displayRequestToConfirm(viewModel: response)
            return
        }
        
        var text = "Confirma a remoção das seguintes letras pelo jogador oponente: "
        for letter in response.lettersToRemove {
            text.append(letter)
        }
        
        let response = Game.ReceivedRequestToConfim.ViewModel(shouldBypassConfirmation: false, lettersToRemove: response.lettersToRemove, textToLabel: text)
        viewController?.displayRequestToConfirm(viewModel: response)
    }
    
    // MARK: Setup for confirm deny
    
    func presentSetupForConfirmDeny(response: Game.SetupForConfirmDenyResponse.Response) {
        let viewModel = Game.SetupForConfirmDenyResponse.ViewModel(confirmRound: response.confirmRound, lettersToRemove: response.lettersToRemove)
        viewController?.displaySetupForConfirmDenyResponse(viewModel: viewModel)
    }
    
    // MARK: Response to confirm
    
    func presentResponseToConfirm(response: Game.ReceivedResponseToConfirm.Response) {
        let viewModel = Game.ReceivedResponseToConfirm.ViewModel(confirmRound: response.confirmRound ?? false, lettersToRemove: response.lettersToRemove ?? [])
        viewController?.displayResponseToConfirm(viewModel: viewModel)
    }
    
    // MARK: Sort letter
    
    func presentSortLetter(response: Game.SortLetter.Response) {
        let viewModel = Game.SortLetter.ViewModel(letterIndex: response.letterIndex, letter: response.letter)
        viewController?.displaySortLetter(viewModel: viewModel)
    }
    
    // MARK: Restart match
    
    func presentRestartMatch(response: Game.RestartMatch.Response) {
        let viewModel = Game.RestartMatch.ViewModel()
        viewController?.displayRestartMatch(viewModel: viewModel)
    }
}
