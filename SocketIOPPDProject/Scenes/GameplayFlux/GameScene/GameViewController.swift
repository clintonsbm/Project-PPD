//
//  GameViewController.swift
//  SocketIOPPDProject
//
//  Created by Clinton de Sá Barreto Maciel on 20/02/19.
//  Copyright (c) 2019 Clinton de Sá. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol GameDisplayLogic: class {
    func displayRemoveLetter(viewModel: Game.LetterEvent.ViewModel)
    func displayRequestToConfirm(viewModel: Game.ConfirmTurn.ViewModel)
    func displaySetupForConfirmDenyResponse(viewModel: Game.SetupForConfirmDenyResponse.ViewModel)
    func displayResponseToConfirm(viewModel: Game.TurnConfirmed.ViewModel)
    func displaySortLetter(viewModel: Game.SortLetter.ViewModel)
    func displayRestartMatch(viewModel: Game.RestartMatch.ViewModel)
}

protocol GameRemoteLogic: NSObjectProtocol {
    func remove(letter: String)
    func add(letter: String)
    func confirmTurn()
    func turnConfirmation(response: Bool, lettersToRemove: [String])
    func sort(letter: String, letterIndex: Int)
    func otherUserResign()
    func otherUserWon()
    func restartMatch()
}

class GameViewController: UIViewController {
    
    // MARK: Statics
    
    static let nibIdentifier = "GameViewController"
        
    var interactor: GameBusinessLogic?
    var router: (NSObjectProtocol & GameRoutingLogic & GameDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = GameInteractor()
        let presenter = GamePresenter()
        let router = GameRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: Outlets
    
    var resignButton = UIBarButtonItem()
    var endTurnButton = UIBarButtonItem()
    @IBOutlet weak var selectedLetter: UILabel!
    @IBOutlet weak var rouletteImageView: UIImageView!
    @IBOutlet var buttons: [UIButton]!
    @IBOutlet weak var lettersLeftLabel: UILabel!
    @IBOutlet weak var turnRouletteWhellButton: UIButton!
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        resignButton = UIBarButtonItem(title: "Desistir", style: .done, target: self, action: #selector(resignAction))
        resignButton.tintColor = .red
        
        endTurnButton = UIBarButtonItem(title: "Finalizar Rodada", style: .plain, target: self, action: #selector(endTurnAction))
        
        navigationItem.setLeftBarButton(resignButton, animated: false)
        navigationItem.setRightBarButton(endTurnButton, animated: false)
        
        setupInitialPreferences()
    }
    
    // MARK: Actions
    @objc
    func resignAction() {
//        RPCHandler.sharedOponent.disconnectSockets()
//        router?.goBack()
    }
    
    @IBAction func clickAction(_ sender: UIButton) {
//        if sender.tintColor != .red {
//            RPCHandler.sharedOponent.remove(letter: sender.titleLabel!.text!)
//            sender.tintColor = .red
//            return
//        }
//
//        RPCHandler.sharedOponent.add(letter: sender.titleLabel!.text!)
//        sender.tintColor = .defaultBlueButton
    }
    
    @objc
    func endTurnAction() {
//        RPCHandler.sharedOponent.confirmTurn()
    }
    
    @IBAction func turnRouletteAction(_ sender: UIButton) {
        sender.isEnabled = false
        let request = Game.SortLetter.Request()
        interactor?.sortLetter(request: request)
    }
    
    // MARK: Initial preferences
    
    private func setupInitialPreferences() {
//        if RPCHandler.sharedOponent.getOponentsOponentUsername() != "1" {
//            changeButtonsIsEnable(to: false)
//        }
    }
    
    // MARK: Is enables
    
    private func changeButtonsIsEnable(to isEnable: Bool) {
        self.endTurnButton.isEnabled = isEnable
        self.turnRouletteWhellButton.isEnabled = isEnable
        self.buttons.forEach({ $0.isEnabled = isEnable})
    }
    
    // MARK: Roulette animation
    
    private func animateRoulette(toIndex index: Int, completion: @escaping(() -> Void)) {
        let rotationConstant = (2 * Double.pi)/26
        self.rouletteImageView.transform = CGAffineTransform(rotationAngle: 0)
        
        UIView.animate(withDuration: 2, animations: {
            self.rouletteImageView.transform = CGAffineTransform(rotationAngle: CGFloat(-Double.pi))
        }) { (_) in
            UIView.animate(withDuration: 2, animations: {
                self.rouletteImageView.transform = CGAffineTransform(rotationAngle: CGFloat(-2*Double.pi))
            }) { (_) in
                UIView.animate(withDuration: 2, animations: {
                    self.rouletteImageView.transform = CGAffineTransform(rotationAngle: CGFloat(rotationConstant * Double(-index)))
                }, completion: { (_) in
                    completion()
                })
            }
        }
    }
}

//extension GameViewController: RPCGameDelegate {
//    func remove(letter: String?) {
//        let request = Game.LetterEvent.Request(isRemoveEvent: true, letter: letter)
//        interactor?.removeLetter(request: request)
//    }
//
//    func add(letter: String?) {
//        let request = Game.LetterEvent.Request(isRemoveEvent: false, letter: letter)
//        interactor?.removeLetter(request: request)
//    }
//
//    func confirmTurn() {
//        let request = Game.ConfirmTurn.Request()
//        interactor?.requestToConfirm(request: request)
//    }
//
//    func turnConfirmation(response: Bool?, lettersToRemove: [String]?) {
//        let request = Game.TurnConfirmed.Request(confirmRound: response, lettersToRemove: lettersToRemove)
//        interactor?.responseToConfirm(request: request)
//    }
//
//    func sort(letter: String?, letterIndex: Int?) {
//        guard let letter = letter, let index = letterIndex else { return }
//        animateRoulette(toIndex: index) {
//            self.selectedLetter.text = letter
//        }
//    }
//
//    func otherUserResign() {
//        AlertHelper.showFinalAlert(didUserWon: true, didUserOtherResign: true) {
//            RPCHandler.sharedOponent.disconnectSockets()
//            self.router?.goBack()
//        }
//    }
//
//    func otherUserWon() {
//        AlertHelper.showFinalAlert(didUserWon: false, didUserOtherResign: false) {
//            RPCHandler.sharedOponent.disconnectSockets()
//            self.router?.goBack()
//        }
//    }
//
//    func restartMatch() {
//        let request = Game.RestartMatch.Request()
//        interactor?.restartMatch(request: request)
//    }
//}

extension GameViewController: GameDisplayLogic {
    
    // MARK: Remove letter
    
    func displayRemoveLetter(viewModel: Game.LetterEvent.ViewModel) {
        lettersLeftLabel.text = viewModel.textToLabel
    }
    
    // MARK: Request to confirm
    
    func displayRequestToConfirm(viewModel: Game.ConfirmTurn.ViewModel) {
        if viewModel.shouldBypassConfirmation {
            let request = Game.SetupForConfirmDenyResponse.Request(confirmRound: true, lettersToRemove: [])
            interactor?.setupForConfirmDeny(request: request)
            return
        }
        
        AlertHelper.showConfirmDeny(withTitle: "Confirmar Rodada", andSubtitle: viewModel.textToLabel) { (didConfirm) in
            let request = Game.SetupForConfirmDenyResponse.Request(confirmRound: didConfirm, lettersToRemove: viewModel.lettersToRemove)
            self.interactor?.setupForConfirmDeny(request: request)
        }
    }
    
    // MARK: Setup for confirm deny response
    
    func displaySetupForConfirmDenyResponse(viewModel: Game.SetupForConfirmDenyResponse.ViewModel) {
        changeButtonsIsEnable(to: viewModel.confirmRound)
        
        if viewModel.confirmRound {
            AlertHelper.showUserFeedbackAlert(confirmRound: viewModel.confirmRound)
        }
    }
    
    // MARK: Response to confirm
    
    func displayResponseToConfirm(viewModel: Game.TurnConfirmed.ViewModel) {
//        if viewModel.confirmRound {
//            changeButtonsIsEnable(to: false)
//            var numberOfButtonsHidden: Int = 0
//            
//            for button in buttons {
//                if let buttonText = button.titleLabel?.text,
//                    viewModel.lettersToRemove.contains(buttonText) {
//                    button.isHidden = true
//                }
//                if button.isHidden {
//                    numberOfButtonsHidden += 1
//                }
//            }
//            
//            if numberOfButtonsHidden >= 26 {
//                ConnectionHandler.shared.sendCurrentUserWon()
//                AlertHelper.showFinalAlert(didUserWon: true, didUserOtherResign: false) {
//                    RPCHandler.sharedOponent.disconnectSockets()
//                    self.router?.goBack()
//                }
//            }
//            
//            return
//        }
//        
//        AlertHelper.showUserFeedbackAlert(confirmRound: false)
    }
    
    // MARK: Sort letter
    
    func displaySortLetter(viewModel: Game.SortLetter.ViewModel) {
        animateRoulette(toIndex: viewModel.letterIndex, completion: {
            self.selectedLetter.text = viewModel.letter
        })
    }
    
    // MARK: Restart match
    
    func displayRestartMatch(viewModel: Game.RestartMatch.ViewModel) {
        buttons.forEach({ $0.tintColor = .defaultBlueButton })
        setupInitialPreferences()
        lettersLeftLabel.text = "Suas letras restantes: 26"
    }
}
